import { ApartmentGuestsVO } from '@domain-value-objects/apartment-guests.value-object';
import { ApartmentRulesProps } from '@domain-value-objects/apartment-rules.value-object';
import { CancellationPolicyCreateProps, CancellationPolicyVO } from '@domain-value-objects/cancellation-policy.value-object';
import { CostAndCurrencyVO } from '@domain-value-objects/cost-and-currency.value-object';
import { PaymentMethodVO } from '@domain-value-objects/payment-method.value-object';
import { ShortTermRentBookingTypeVO } from '@domain-value-objects/rent-booking-type.value-object';
import { ShortTermRentPaymentTypeVO } from '@domain-value-objects/short-term-rent-payment-type.value-object';
import { ISystemMessageData } from '@domains/message/domain/types';
import { PaymentTransactionEntity } from '@domains/payment-transaction/domain/entities/payment-transaction.entity';
import { RentPeriodVersionEntity } from '@domains/rent-period-version/domain/rent-period-version.entity';
import { TemporaryPaymentTransactionEntity } from '@domains/temporary-payment-transaction/domain/entities/temporary-payment-transaction.entity';
import { ApartmentRentPeriodType, ShortTermRentBookingType, ShortTermRentPaymentType } from '@infrastructure/enums';
import { AggregateRoot } from '@libs/ddd/domain/base-classes/aggregate-root.base';
import { DateTimeISOTZVO } from '@libs/ddd/domain/value-objects/date-time-iso-tz.value-object';
import { UUID } from '@libs/ddd/domain/value-objects/uuid.value-object';
import { ContractStatusVO } from '../../../../domain-value-objects/contract-status.value-object';
import { AdminCancelationMode, CancellationData, CancellationTrigger, CreateContractStatus } from '../types';
import { BaseContractApartmentAdDataVO } from '../value-objects/base-contract-apartment-ad-data.value-object';
import { ContractDetailsProps, ContractDetailsVO } from '../value-objects/contract-details.value-object';
import { TemporaryPaymentDataVO } from '../value-objects/temporary-payment-data.value-object';
import { ContractCancelationEntity } from './contract-cancelation.entity';
export interface CreateContractProps {
    contractRequestId?: UUID;
    tenantId?: UUID;
    apartmentAdId?: UUID;
    apartmentRentPeriodType: ApartmentRentPeriodType;
    landlordId?: UUID;
    costAndCurrency: CostAndCurrencyVO;
    status: CreateContractStatus;
    detailsProps: ContractDetailsProps;
    rentPeriodVersion: RentPeriodVersionEntity;
    cancellationPolicyProps: CancellationPolicyCreateProps;
    tenantPaymentMethod?: PaymentMethodVO;
    shortTermRentBookingType?: ShortTermRentBookingTypeVO;
    shortTermRentPaymentType?: ShortTermRentPaymentTypeVO;
    baseContractApartmentAdData: BaseContractApartmentAdDataVO;
    isFined: boolean;
    guests: ApartmentGuestsVO;
    paymentData?: TemporaryPaymentDataVO | null;
    isTemporary?: boolean;
}
export declare type ContractProps = Omit<CreateContractProps, 'detailsProps' | 'status' | 'cancellationPolicyProps' | 'isTemporary' | 'paymentData'> & {
    isPending: boolean;
    isExistUnpaidTransactions: boolean;
    status: ContractStatusVO;
    details: ContractDetailsVO;
    cancellationPolicy: CancellationPolicyVO;
    nextPaymentTransactionId?: UUID;
    contractCancelation?: ContractCancelationEntity;
    isTemporary: boolean;
    paymentData: TemporaryPaymentDataVO | null;
};
export declare class ContractEntity extends AggregateRoot<ContractProps> {
    protected readonly _id: UUID;
    private static readonly PARTIAL_PAYMENT_DAYS_BEFORE_CANCEL;
    static readonly TEMPORARY_CONTRACT_LIFE_TIME_PER_MINUTES = 30;
    static create({ apartmentAdId, detailsProps, tenantId, costAndCurrency, status, apartmentRentPeriodType, landlordId, contractRequestId, rentPeriodVersion, cancellationPolicyProps, tenantPaymentMethod, shortTermRentBookingType, shortTermRentPaymentType, baseContractApartmentAdData, isFined, guests, isTemporary, paymentData, }: CreateContractProps): ContractEntity;
    setTenantPaymentMethod(cardId: UUID): void;
    setOffer({ allowedToHangingOut, allowedToSmoke, allowedWithChildren, allowedWithPets }: ApartmentRulesProps): void;
    instantBooking(): PaymentTransactionEntity[];
    temporaryInstantBooking(): TemporaryPaymentTransactionEntity[];
    acceptOffer(cardId: UUID): PaymentTransactionEntity[];
    acceptOfferDown(): void;
    temporaryConclude(): TemporaryPaymentTransactionEntity[];
    setPaymentData(props: {
        customerReference: string;
        paymentUrl: string;
        paymentUrlStartAt: Date;
    }): void;
    modifyToPermanent(cardId: UUID): void;
    rollbackChatBookingTemporary(): void;
    rejectOffer(): void;
    setPending(): void;
    endPending(): void;
    isReadyToReject(): boolean;
    isReadyToAcceptInChat(): boolean;
    isActive(): boolean;
    reject(): this;
    setDates(dates: {
        arrivalDate: string;
        departureDate: string;
    }): void;
    setNextPaymentTransactionId(nextPaymentTransactionId?: UUID): void;
    isPartialPaymentNeedToCancel(startCashInDate: string): boolean;
    cancel(data: {
        paymentTransactions: PaymentTransactionEntity[];
        trigger: CancellationTrigger;
        newCheckOutDate?: DateTimeISOTZVO;
    }, adminCancelMeta?: AdminCancelationMode): CancellationData;
    private generateTransactions;
    private generateTenantCancelationData;
    private generateLandlordCancelationData;
    private updateTenantContractCancelation;
    private updateLandlordContractCancelation;
    get id(): UUID;
    get status(): ContractStatusVO;
    get landlord(): UUID | undefined;
    get tenant(): UUID | undefined;
    get apartmentRentPeriodType(): ApartmentRentPeriodType;
    get rules(): ApartmentRulesProps | undefined;
    get arrivalDate(): DateTimeISOTZVO | undefined;
    get departureDate(): DateTimeISOTZVO | undefined;
    get isPending(): boolean;
    get isFined(): boolean;
    get isTemporary(): boolean;
    get costAndCurrency(): CostAndCurrencyVO;
    get rentPeriodVersion(): RentPeriodVersionEntity;
    get timezone(): string;
    get apartmentAdIdOrFail(): UUID;
    get cancellationPolicy(): import("@domain-value-objects/cancellation-policy.value-object").CancellationPolicyProps;
    get paymentType(): ShortTermRentPaymentType | undefined;
    get tenantIdOrFail(): UUID;
    get landlordIdOrFail(): UUID;
    get arrivalDateOrFail(): string;
    get tenantPaymentCardOrFail(): string;
    get paymentDataOrFail(): {
        paymentUrl: string;
        paymentUrlStartAt: string;
        customerReference: string;
    };
    get paymentData(): TemporaryPaymentDataVO | null;
    get isValidTemporary(): boolean;
    get shortTermRentBookingType(): ShortTermRentBookingType | undefined;
    get departureDateOrFail(): string;
    get systemMessageData(): ISystemMessageData;
    get isCanCancelled(): boolean;
    completePast(): void;
    validate(): void;
    private validateShortTermRent;
    validateLongTermRent(): void;
    private validatePeriod;
    private validateCancellationPolicy;
    private validateActiveRequiredFields;
    private validateOffer;
    private validatePermanentConcluded;
    private validateTemporaryConcluded;
    private validateInstantBooking;
}
