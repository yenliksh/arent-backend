import { AddressCreateProps } from '@domain-value-objects/address.value-object';
import { ApartmentAdCharacteristicsProps } from '@domain-value-objects/apartment-characteristics.value-object';
import { IGuests } from '@domain-value-objects/apartment-guests.value-object';
import { ApartmentRulesVO } from '@domain-value-objects/apartment-rules.value-object';
import { ApartmentRentPeriodType, LongTermRentCancellationPolicyType, ShortTermRentBookingType, ShortTermRentCancellationPolicyType } from '@infrastructure/enums';
import { AggregateRoot } from '@libs/ddd/domain/base-classes/aggregate-root.base';
import { UUID } from '@libs/ddd/domain/value-objects/uuid.value-object';
import { PaymentMethodProps } from '../../../../domain-value-objects/payment-method.value-object';
import { AdEditActions, ApartmentCategory, ApartmentType } from '../types';
import { ApartmentAdDescriptionProps } from '../value-objects/apartment-ad-description.value-object';
import { ApartmentAdDetailsProps } from '../value-objects/apartment-ad-details.value-object';
import { RentPeriodTypeVO } from '../value-objects/rent-period-type.value-object';
import { ApartmentAdCreateProps, ApartmentAdEditProps, ApartmentAdProps, AvailabilitySettingsEditProps, ImportantInfoSetProps } from './apartment-ad.types';
export declare class ApartmentAdEntity extends AggregateRoot<ApartmentAdProps> {
    protected readonly _id: UUID;
    static create({ landlordId, rentPeriodType, shortTermRentCost, longTermRentCost, slug, }: ApartmentAdCreateProps): ApartmentAdEntity;
    get id(): UUID;
    get landlordId(): UUID;
    get rules(): ApartmentRulesVO | undefined;
    get rentPeriodType(): RentPeriodTypeVO;
    get longTermRentIsRented(): boolean;
    get shortTermRentCancellationPolicy(): ShortTermRentCancellationPolicyType | undefined;
    get longTermRentCancellationPolicy(): LongTermRentCancellationPolicyType | undefined;
    get isPaymentMethodAttached(): boolean;
    get isAllStepsCreationFilled(): boolean;
    get rentBookingType(): ShortTermRentBookingType | undefined;
    private setStep;
    getCostAndCurrency(type: ApartmentRentPeriodType): import("../../../../domain-value-objects/cost-and-currency.value-object").CostAndCurrencyVO;
    getTimezoneOrFail(): string;
    getDepartureTimeOrFail(): string;
    getArrivalTimeOrFail(): string;
    get longTermRentId(): UUID | undefined;
    get shortTermRentId(): UUID | undefined;
    private editShortTermRentApartmentAd;
    private editLongTermRentApartmentAd;
    editShortTermRentAvailability(props: AvailabilitySettingsEditProps): void;
    private areIntersected;
    private isDatesOverlaps;
    editApartmentAd({ rentPeriodType, shortTermRentCost, longTermRentCost }: ApartmentAdEditProps): {
        longTermAction: AdEditActions | null;
        shortTermAction: AdEditActions | null;
    };
    private isExistLongTermRent;
    private isExistShortTermRent;
    setApartmentType(type: ApartmentType): void;
    setApartmentCategory(category: ApartmentCategory): void;
    setDetails(props: ApartmentAdDetailsProps): void;
    setCharacteristics(props: ApartmentAdCharacteristicsProps): void;
    setAddress(props: AddressCreateProps): void;
    get isShortTermRentPublished(): boolean;
    setMedia(urls: string[]): void;
    setDescription(props: ApartmentAdDescriptionProps): void;
    adminEditDescriptionText(descriptionText: string): this;
    adminEditDescriptionName(name: string): this;
    get isAdHasAllRequirements(): boolean;
    approveLongTermRent(): void;
    rejectLongTermRent(declineReason: string): void;
    rejectShortTermRent(declineReason: string): void;
    approveShortTermRent(): void;
    get isShortTermRent(): boolean;
    get isLongTermRent(): boolean;
    get longTermRentStatus(): import("../value-objects/apartment-ad-status.value-object").ApartmentAdStatusVO | undefined;
    get shortTermRentStatus(): import("../value-objects/apartment-ad-status.value-object").ApartmentAdStatusVO | undefined;
    get baseApartmentAdDataForContract(): {
        name: string;
        address: AddressCreateProps;
    } | undefined;
    setOwnershipDocuments(documents: string[]): void;
    setPaymentMethod(props: PaymentMethodProps): void;
    setImportantInfo({ allowedToHangingOut, allowedToSmoke, allowedWithChildren, allowedWithPets, shortTermRentArrivalTime, shortTermRentDepartureTime, shortTermRentCancellationPolicyType, shortTermRentBookingType, }: ImportantInfoSetProps): void;
    switchRentBookingType(): this;
    sendToApprove(): void;
    pause(periodType: ApartmentRentPeriodType): void;
    publish(periodType: ApartmentRentPeriodType): void;
    isRentPublished(rentPeriodType: ApartmentRentPeriodType): boolean;
    get isPublishable(): boolean;
    pausePublishingByAcceptContract(type: ApartmentRentPeriodType): this;
    get numberOfGuests(): number;
    isGuestsValid(guests: IGuests): boolean;
    private rentLongTermAd;
    private rentShortTermRentAd;
    validate(): void;
}
