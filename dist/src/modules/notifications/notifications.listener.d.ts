import { ConfigService } from '@nestjs/config';
import { ApartmentAdApprovedEvent } from './services/apartment-ad-approved/apartment-ad-approved.event';
import { ApartmentAdApprovedService } from './services/apartment-ad-approved/apartment-ad-approved.service';
import { ApartmentAdRejectedEvent } from './services/apartment-ad-rejected/apartment-ad-rejected.event';
import { ApartmentAdRejectService } from './services/apartment-ad-rejected/apartment-ad-rejected.service';
import { BookingRequestSentEvent } from './services/booking-request-sent/booking-request-sent.event';
import { BookingRequestSentService } from './services/booking-request-sent/booking-request-sent.service';
import { BookingRequestStatusChangedEvent } from './services/booking-request-status-changed/booking-request-status-changed.event';
import { BookingRequestStatusChangedService } from './services/booking-request-status-changed/booking-request-status-changed.service';
import { ContractConcludedEvent } from './services/contract-concluded/contract-concluded.event';
import { ContractConcludedService } from './services/contract-concluded/contract-concluded.service';
import { ContractOfferSentEvent } from './services/contract-offer-sent/contract-offer-sent.event';
import { ContractOfferSentService } from './services/contract-offer-sent/contract-offer-sent.service';
import { ContractOfferStatusChangedEvent } from './services/contract-offer-status-changed/contract-offer-status-changed.event';
import { ContractOfferStatusChangedService } from './services/contract-offer-status-changed/contract-offer-status-changed.service';
import { NewMessageEvent } from './services/new-message/new-message.event';
import { NewMessageService } from './services/new-message/new-message.service';
import { PaymentTransferFailureEvent } from './services/payment-transfer-failure/payment-transfer-failure.event';
import { PaymentTransferFailureService } from './services/payment-transfer-failure/payment-transfer-failure.service';
import { PaymentTransferSuccessEvent } from './services/payment-transfer-success/payment-transfer-success.event';
import { PaymentTransferSuccessService } from './services/payment-transfer-success/payment-transfer-success.service';
import { RecurringPaymentLastWithdrawFailureEvent } from './services/recurring-payment-last-withdraw-failure/recurring-payment-last-withdraw-failure.event';
import { RecurringPaymentLastWithdrawFailureService } from './services/recurring-payment-last-withdraw-failure/recurring-payment-last-withdraw-failure.service';
import { RecurringPaymentWithdrawFailureEvent } from './services/recurring-payment-withdraw-failure/recurring-payment-withdraw-failure.event';
import { RecurringPaymentWithdrawFailureService } from './services/recurring-payment-withdraw-failure/recurring-payment-withdraw-failure.service';
import { RecurringPaymentWithdrawSuccessEvent } from './services/recurring-payment-withdraw-success/recurring-payment-withdraw-success.event';
import { RecurringPaymentWithdrawSuccessService } from './services/recurring-payment-withdraw-success/recurring-payment-withdraw-success.service';
import { RequireIdentityDocumentEvent } from './services/require-identity-document/require-identity-document.event';
import { RequireIdentityDocumentService } from './services/require-identity-document/require-identity-document.service';
import { VerificationEmailEvent } from './services/verification-email/verification-email.event';
import { VerificationEmailService } from './services/verification-email/verification-email.service';
export declare class NotificationListener {
    private readonly configService;
    private readonly newMessageService;
    private readonly verificationEmailService;
    private readonly requireIdentityDocumentService;
    private readonly contractConcludedService;
    private readonly recurringPaymentWithdrawSuccessService;
    private readonly recurringPaymentWithdrawFailureService;
    private readonly paymentTransferSuccessService;
    private readonly paymentTransferFailureService;
    private readonly recurringPaymentLastWithdrawFailureService;
    private readonly bookingRequestSentService;
    private readonly bookingRequestStatusChangedService;
    private readonly apartmentAdApprovedService;
    private readonly apartmentAdRejectService;
    private readonly contractOfferStatudChangedService;
    private readonly contractOfferSentService;
    isDevelopment: boolean;
    constructor(configService: ConfigService, newMessageService: NewMessageService, verificationEmailService: VerificationEmailService, requireIdentityDocumentService: RequireIdentityDocumentService, contractConcludedService: ContractConcludedService, recurringPaymentWithdrawSuccessService: RecurringPaymentWithdrawSuccessService, recurringPaymentWithdrawFailureService: RecurringPaymentWithdrawFailureService, paymentTransferSuccessService: PaymentTransferSuccessService, paymentTransferFailureService: PaymentTransferFailureService, recurringPaymentLastWithdrawFailureService: RecurringPaymentLastWithdrawFailureService, bookingRequestSentService: BookingRequestSentService, bookingRequestStatusChangedService: BookingRequestStatusChangedService, apartmentAdApprovedService: ApartmentAdApprovedService, apartmentAdRejectService: ApartmentAdRejectService, contractOfferStatudChangedService: ContractOfferStatusChangedService, contractOfferSentService: ContractOfferSentService);
    newMessage(payload: NewMessageEvent): Promise<void>;
    verificationEmail(payload: VerificationEmailEvent): Promise<void>;
    requireIdentityDocument(payload: RequireIdentityDocumentEvent): Promise<void>;
    contractConcluded(payload: ContractConcludedEvent): Promise<void>;
    recurringPaymentWithdrawSuccess(payload: RecurringPaymentWithdrawSuccessEvent): Promise<void>;
    recurringPaymentWithdrawFailure(payload: RecurringPaymentWithdrawFailureEvent): Promise<void>;
    recurringPaymentTransferSuccess(payload: PaymentTransferSuccessEvent): Promise<void>;
    recurringPaymentTransferFailure(payload: PaymentTransferFailureEvent): Promise<void>;
    recurringPaymentLastWithdrawFailure(payload: RecurringPaymentLastWithdrawFailureEvent): Promise<void>;
    bookingRequestSent(payload: BookingRequestSentEvent): Promise<void>;
    contractOfferSent(payload: ContractOfferSentEvent): Promise<void>;
    apartmentAdApproved(payload: ApartmentAdApprovedEvent): Promise<void>;
    apartmentAdRejected(payload: ApartmentAdRejectedEvent): Promise<void>;
    contractOfferStatusSent(payload: ContractOfferStatusChangedEvent): Promise<void>;
    bookingRequestStatusChanged(payload: BookingRequestStatusChangedEvent): Promise<void>;
}
