import { ApartmentAdCharacteristicsProps } from '@domain-value-objects/apartment-characteristics.value-object';
import { ApartmentRulesProps } from '@domain-value-objects/apartment-rules.value-object';
import { ApartmentAdOrmEntity } from '@infrastructure/database/entities/apartment-ad.orm-entity';
import { LongTermRentOrmEntity } from '@infrastructure/database/entities/long-term-rent.orm-entity';
import { LongTermRentCancellationPolicyType, PaymentMethod } from '@infrastructure/enums';
import { Model } from 'objection';
import { ApartmentAdStatusType, ApartmentCategory, ApartmentType, CurrencyType, LegalCapacityType } from 'src/rental-context/domains/apartment-ad/domain/types';
import { ApartmentAdDescriptionProps } from 'src/rental-context/domains/apartment-ad/domain/value-objects/apartment-ad-description.value-object';
import { MediaProps } from 'src/rental-context/domains/apartment-ad/domain/value-objects/media.value-object';
declare type LongTermRentRequest = Omit<LongTermRentOrmEntity, 'apartmentAdId' | keyof Model> & Omit<ApartmentAdOrmEntity, 'rentPeriodType' | 'completeStep' | keyof Model>;
export declare class LongTermRentRequestTypeormEntity implements LongTermRentRequest {
    static tableName: string;
    id: string;
    landlordId: string;
    longTermRentId: string;
    apartmentCategory: ApartmentCategory;
    apartmentType: ApartmentType;
    numberOfGuests?: number;
    numberOfRooms?: number;
    country?: string;
    city?: string;
    street?: string;
    region?: string;
    houseNumber?: string;
    lat?: number;
    lng?: number;
    media?: MediaProps;
    description?: ApartmentAdDescriptionProps;
    rules?: ApartmentRulesProps;
    characteristics?: ApartmentAdCharacteristicsProps;
    cancellationPolicy?: LongTermRentCancellationPolicyType;
    legalCapacityType: LegalCapacityType;
    legalCapacityTinBin?: string;
    legalCapacityCompanyName?: string;
    legalCapacityAddress?: string;
    cost: number;
    currency: CurrencyType;
    status: ApartmentAdStatusType[];
    isApproved: boolean;
    declineReason?: string;
    ownershipDocuments?: string[];
    innopayCardId?: string;
    defaultPaymentMethod?: PaymentMethod;
    createdAt: Date;
    updatedAt: Date;
    deletedAt?: Date;
}
export {};
