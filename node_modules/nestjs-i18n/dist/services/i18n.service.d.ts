import { Logger } from '@nestjs/common';
import { I18nOptions } from '..';
import { I18nTranslation } from '../interfaces/i18n-translation.interface';
import { Observable, BehaviorSubject } from 'rxjs';
import { I18nLoader } from '../loaders/i18n.loader';
export declare type TranslateOptions = {
    lang?: string;
    args?: ({
        [k: string]: any;
    } | string)[] | {
        [k: string]: any;
    };
    defaultValue?: string;
    debug?: boolean;
};
export declare class I18nService {
    private readonly i18nOptions;
    private readonly logger;
    private readonly loader;
    private readonly languagesSubject;
    private readonly translationsSubject;
    private supportedLanguages;
    private translations;
    constructor(i18nOptions: I18nOptions, translations: Observable<I18nTranslation>, supportedLanguages: Observable<string[]>, logger: Logger, loader: I18nLoader, languagesSubject: BehaviorSubject<string[]>, translationsSubject: BehaviorSubject<I18nTranslation>);
    translate<T = any>(key: string, options?: TranslateOptions): T;
    t<T = any>(key: string, options?: TranslateOptions): T;
    getSupportedLanguages(): string[];
    refresh(translations?: I18nTranslation | Observable<I18nTranslation>, languages?: string[] | Observable<string[]>): Promise<void>;
    hbsHelper: (key: string, args: any, options: any) => any;
    private translateObject;
    private handleFallbacks;
    private getPluralObject;
    private getNestedTranslations;
}
